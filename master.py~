#This is the main script where we call
from urllib2 import urlopen
from readpdb import *
from clean_pdb import *
from divide_mer import *
#from alignment import *
import argparse
import logging

logging.basicConfig(filename='pdbParser.log',level=logging.CRITICAL)

parser = argparse.ArgumentParser(description='Identification of Missing residues')
parser.add_argument('--start', metavar='PDB Code', nargs=1 , help='Crystal structure from PDB database with the header')
parser.add_argument('--end', metavar='PDB Code', nargs=1 , help='Crystal structure from PDB database with the header')
parser.add_argument('--local',help='User PDB files',dest='local', action='store_true')
parser.add_argument('--no-local',help='Files are fetched from RCSB database',dest='local',action='store_false')
parser.set_defaults(local=False)
parser.add_argument('--multimeric', dest='mer', help='If the protein is multimeric provide the number of mers.', type=int)
parser.set_defaults(mer=1)

args=parser.parse_args()
sid=args.start[0]
eid=args.end[0]

def pdbParser(pdb,pdbid,mer):
    compnd=readcompnd(pdb,pdbid)
    logging.info('Detected chains for %s are ' % (pdbid)+' '.join(i for i in compnd))
    if len(compnd) is not 1:
        logging.info('If multimeric option not chosen continuing with the chain %s' %(compnd[0]))
    if mer is not False:
        logging.info('Multimeric option chosen...')
        if mer < len(compnd):
            logging.warning('%s structure contains more biological assemblies than one' % (pdbid))
            if len(compnd) % mer != 0:
                logging.critical('Cannot determine the biological assembly, please provide your own input files')
                exit()
            else:
                logging.warning('Will attempt to seperate them')
        elif mer == 1 and len(compnd) != 1:
            logging.warning('Assuming monomeric assembly.')
            logging.warning('You chose only 1 chain for the analysis but there are more chains in the biological assembly')
        elif mer > len(compnd):
            logging.warning("Structure contains less chains then the supplied multimeric option. Assuming not complete structure, please provide your own input files")
            exit()
    logging.info('Checking for missing residues')
    logging.info('Retriving CA coordinates')
    atomlines=readatom(pdb)
    coords=coord(atomlines,compnd)
    ca=getca(coords,compnd)
    div=divide_mer(ca,compnd,mer)

if args.local is True:
    sca=getca(open(args.start[0]).readlines())
    eca=getca(open(args.end[0]).readlines())
    logging.info('You have provided PDB files, assuming you have fixed the missing residues and made sure that the structures have the same number of residues')
    logging.info('Moving to eBDIMS calculations')
else:
    logging.info('Fetching PDB files from RCSB database')
    start=getpdb(sid)
    end=getpdb(eid)
    logging.info('Processing PDB files')
    

#identify missing residues
#Needs two routines, one from PDB Header and the other one from sequence when Header is not possible 

if args.local is True:
    logging.info('Moving to eBDIMS calculations')
else:
    pdbParser(start,sid,args.mer)
    pdbParser(end,eid,args.mer)
    logging.info('Checking for missing residues')
#create sequences from CA 
#We still have a problem of multiple confomers. They are not present in the file but we have not renamed them either. So the shell script below requires more lines to replace them.
#     call(['./check_seq.sh end.pdb'],shell=True)
#     call(['./check_seq.sh start.pdb'],shell=True)
#     eseq=open('end.seq','r').readlines()[0].strip()
#     sseq=open('start.seq','r').readlines()[0].strip()
#Grab CA and create an alignment
#     align(eseq,sseq)
#Check for misaligned regions, report any residue mismatch.

#Pass the inputs as start.pdb and end.pdb to the eBDIMS
